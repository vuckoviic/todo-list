(()=>{"use strict";var e={d:(t,n)=>{for(var l in n)e.o(n,l)&&!e.o(t,l)&&Object.defineProperty(t,l,{enumerable:!0,get:n[l]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};function t(){document.getElementById("content").innerHTML=""}e.d({},{q7:()=>b,B5:()=>v,r3:()=>g,ar:()=>C,dt:()=>k});const n=document.getElementById("inbox");let l=[],i=[];i.push(n);let d,o,a=[];function r(e){e.style.backgroundColor="low"===o?"lightblue":"normal"==o?"rgb(51, 126, 245)":"red"}function c(e){if(o=e.target.parentElement.getAttribute("data-priority"),!0===e.target.checked){e.target.parentElement.style.backgroundColor="green",console.log("Div is checked"),e.target.parentElement.setAttribute("data-checked","true");let t=e.target.parentElement.getAttribute("data-index");d[t].checked=!0,console.log(d[t].checked)}else{"low"===o?(e.target.parentElement.style.backgroundColor="lightblue",console.log("Div is not checked"),e.target.parentElement.setAttribute("data-checked","false")):"normal"==o?(e.target.parentElement.style.backgroundColor="rgb(51, 126, 245)",console.log("Div is not checked"),e.target.parentElement.setAttribute("data-checked","false")):(e.target.parentElement.style.backgroundColor="red",console.log("Div is not checked"),e.target.parentElement.setAttribute("data-checked","false"));let t=e.target.parentElement.getAttribute("data-index");d[t].checked=!1,console.log(d[t].checked)}}function s(e){e.setAttribute("data-editing","true"),console.log("Div IS being edited right now");const t=document.createElement("input"),n=document.createElement("textarea"),l=document.createElement("input"),i=document.createElement("select"),a=document.createElement("option"),c=document.createElement("option"),s=document.createElement("option");a.innerText="Low",c.innerText="Normal",s.innerText="High",a.setAttribute("value","low"),c.setAttribute("value","normal"),s.setAttribute("value","high");const u=e.children,p=u.item(0),h=u.item(1).innerText,g=u.item(2).innerText,v=u.item(3).innerText,y=e.getAttribute("data-priority");p.disabled=!0,t.value=h,n.innerText=g,l.value=v,i.innerText=y,i.appendChild(a),i.appendChild(c),i.appendChild(s),"low"==y?a.selected=!0:"normal"==y?c.selected=!0:"high"==y&&(s.selected=!0),l.type="date",e.appendChild(t),e.appendChild(n),e.appendChild(l),e.appendChild(i),e.removeChild(u.item(1)),e.removeChild(u.item(1)),e.removeChild(u.item(1));const E=document.createElement("button"),b=document.createElement("button"),C=document.createElement("button");E.classList.add("editButton","saveEditButton"),b.classList.add("editButton","closeEditButton"),C.classList.add("editButton","deleteEditButton"),E.innerText="Save",b.innerText="Close",C.innerText="Delete",e.appendChild(C),e.appendChild(b),e.appendChild(E),C.addEventListener("click",(()=>{m.removeChild(e);const t=parseInt(e.getAttribute("data-index"));d.pop(d[t]),e.setAttribute("data-editing","false"),console.log("Div IS NOT being edited right now.")})),b.addEventListener("click",(()=>{const d=document.createElement("h3"),o=document.createElement("p"),a=document.createElement("p");e.setAttribute("data-priority",y),d.innerText=h,o.innerText=g,o.style.fontStyle="italic",a.innerText=v,e.appendChild(d),e.appendChild(o),e.appendChild(a),e.removeChild(t),e.removeChild(n),e.removeChild(l),e.removeChild(i),e.removeChild(E),e.removeChild(b),e.removeChild(C),p.disabled=!1,e.setAttribute("data-editing","false"),console.log("Div IS NOT being edited right now.")})),E.addEventListener("click",(()=>{const a=document.createElement("h3"),c=document.createElement("p"),s=document.createElement("p");a.innerText=t.value,c.innerText=n.value,c.style.fontStyle="italic",s.innerText=l.value;const m=parseInt(e.getAttribute("data-index"));d[m].title=t.value,d[m].description=n.value,d[m].dueDate=l.value,d[m].priority=i.value,o=i.value,r(e),e.setAttribute("data-priority",i.value),console.log(d[m]),console.log("Saved item's priority is: "+d[m].priority),e.appendChild(a),e.appendChild(c),e.appendChild(s),e.removeChild(t),e.removeChild(n),e.removeChild(l),e.removeChild(i),e.removeChild(E),e.removeChild(b),e.removeChild(C),p.disabled=!1,e.setAttribute("data-editing","false"),console.log("Div IS NOT being edited right now.")}))}a.push(l),d=l,n.classList.add("active-project"),n.addEventListener("click",(()=>{t(),v.disabled=!0,v.style.backgroundColor="grey";for(let e=0;e<i.length;e++)i[e].classList.remove("active-project"),i[e].displayed=!1,p=0;n.classList.add("active-project");for(let e=0;e<i.length;e++)i[e].classList.contains("active-project")&&(d=a[e]);for(let e=0;e<l.length;e++){for(let t=0;t<l[e].length;t++)l[e][t].displayed=!1,console.log(l[e][t]);console.log("displayedItems: "+p),p=0,h(l[e])}}));const m=document.getElementById("content");let u,p=0;function h(e){for(let t=p;t<e.length;t++){u=document.createElement("div");const n=document.createElement("input");n.type="checkbox",n.classList.add("checkbox");const l=document.createElement("div"),i=document.createElement("div"),d=document.createElement("div");l.innerHTML="<h3>"+e[t].title+"</h3>",i.innerHTML="<p>"+e[t].description+"</p>",d.innerHTML="<p>"+e[t].dueDate+"</p>",o=e[t].priority,r(u),u.setAttribute("data-priority",o),u.setAttribute("data-index",t),u.setAttribute("data-checked","false"),u.setAttribute("data-editing","false"),1==e[t].checked?(n.checked=!0,u.setAttribute("data-checked","true"),u.style.backgroundColor="green"):(n.checked=!1,u.setAttribute("data-checked","false")),u.appendChild(n),u.appendChild(l),u.appendChild(i),u.appendChild(d),u.classList.add("showItemDiv"),i.classList.add("showDescription"),m.appendChild(u),n.addEventListener("click",c),u.addEventListener("click",(e=>{e.target==u&&"false"==u.getAttribute("data-checked")&&"false"==u.getAttribute("data-editing")&&s(e.target)})),e[t].displayed=!0,p++}}const g=document.getElementsByTagName("dialog")[0],v=document.getElementById("addItem");v.disabled=!0,1==v.disabled?v.style.backgroundColor="grey":v.style.backgroundColor="navy";const y=document.getElementById("closeDialog"),E=document.getElementsByTagName("form")[0];v.addEventListener("click",(()=>{g.showModal(),E.reset()})),y.addEventListener("click",(()=>{g.close()}));class b{constructor(e,t,n,l){this.title=e,this.description=t,this.dueDate=n,this.priority=l}}document.getElementById("createTodoItem").addEventListener("click",(()=>{!function(e){const t=document.getElementById("title").value,n=document.getElementById("description").value,l=document.getElementById("dueDate").value;if(o=document.getElementById("priority").value,t.length<1)alert("Please Insert a Title.");else if(n.length<1)alert("Please Insert a Description.");else if(""===l)alert("Please Choose Your Due Date.");else{const i=new b(t,n,l,o);console.log(i),console.log(e),e.push(i),h(e),g.close()}}(d)}));const C=document.getElementById("newProject"),k=document.getElementById("projects");C.addEventListener("click",(function(){const e=document.createElement("button"),n=document.createElement("input"),o=document.createElement("button"),r=document.createElement("button");o.innerText="Save",r.innerText="Exit",e.style.padding="3px",o.style.backgroundColor="white",o.style.maxHeight="15px",o.style.maxWidth="15px",o.style.fontSize="1em",o.style.color="navy",o.style.marginTop="5px",r.style.backgroundColor="white",r.style.maxHeight="15px",r.style.maxWidth="15px",r.style.fontSize="1em",r.style.color="navy",r.style.marginTop="5px",e.appendChild(n),e.appendChild(r),e.appendChild(o),o.addEventListener("click",(()=>{let o=n.value;o.length<1?alert("Please Insert Name For Your Project."):(e.innerText=o,o=new Array,a.push(o),l.push(o),e.addEventListener("click",(()=>{t(),v.disabled=!1,v.style.backgroundColor="navy";for(let e=0;e<i.length;e++)i[e].classList.remove("active-project"),i[e].displayed=!1,p=0;e.classList.add("active-project");for(let e=0;e<i.length;e++)i[e].classList.contains("active-project")&&(d=a[e]);h(d)})))})),r.addEventListener("click",(()=>{k.removeChild(e)})),k.removeChild(C),k.appendChild(e),k.appendChild(C),i.push(e)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RixVQUFZLE1BRTlCVCxFQUFROUMsWUFBWStDLEdBQ3BCRCxFQUFROUMsWUFBWWlELEdBQ3BCSCxFQUFROUMsWUFBWWdELEdBRXBCQSxFQUFZdkMsaUJBQWlCLFNBQVMsS0FFbEMsSUFBSStDLEVBQU9ULEVBQWlCaEQsTUFFeEJ5RCxFQUFLbEMsT0FBUyxFQUNkb0IsTUFBTSx5Q0FJTkksRUFBUXhELFVBQVlrRSxFQUNwQkEsRUFBTyxJQUFJQyxNQUNYM0YsRUFBaUJILEtBQUs2RixHQUN0Qi9GLEVBQVdFLEtBQUs2RixHQUVoQlYsRUFBUXJDLGlCQUFpQixTQUFTLEtBRTlCckQsSUFFQWdFLEVBQVF0QixVQUFXLEVBQ25Cc0IsRUFBUW5ELE1BQU1DLGdCQUFrQixPQUVoQyxJQUFLLElBQUltRCxFQUFJLEVBQUdBLEVBQUkzRCxFQUFZNEQsT0FBUUQsSUFDcEMzRCxFQUFZMkQsR0FBR2QsVUFBVWdCLE9BQU8sa0JBQ2hDN0QsRUFBWTJELEdBQUdHLFdBQVksRUFDM0JDLEVBQWlCLEVBR3JCcUIsRUFBUXZDLFVBQVVDLElBQUksa0JBRXRCLElBQUssSUFBSWEsRUFBSSxFQUFHQSxFQUFJM0QsRUFBWTRELE9BQVFELElBQ2hDM0QsRUFBWTJELEdBQUdkLFVBQVVtQixTQUFTLG9CQUNsQzlELEVBQWNFLEVBQWlCdUQsSUFJdkNPLEVBQWFoRSxFQUFZLElBR2pDLElBSUpxRixFQUFZeEMsaUJBQWlCLFNBQVMsS0FDbENvQyxFQUFTMUMsWUFBWTJDLEVBQVEsSUFHakNELEVBQVMxQyxZQUFZeUMsR0FDckJDLEVBQVM3QyxZQUFZOEMsR0FDckJELEVBQVM3QyxZQUFZNEMsR0FFckJsRixFQUFZQyxLQUFLbUYsRUFFckIsRyIsInNvdXJjZXMiOlsid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly90b2RvLWxpc3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3RvZG8tbGlzdC93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9jbGVhckNvbnRlbnQuanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3Byb2plY3RzLmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9jcmVhdGVUb2RvSXRlbS5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvc2V0dGluZ1ByaW9yaXR5LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9jaGVja0NoZWNrYm94LmpzIiwid2VicGFjazovL3RvZG8tbGlzdC8uL3NyYy9lZGl0U2hvd0l0ZW0uanMiLCJ3ZWJwYWNrOi8vdG9kby1saXN0Ly4vc3JjL3Nob3dpbmdJdGVtcy5qcyIsIndlYnBhY2s6Ly90b2RvLWxpc3QvLi9zcmMvaW5kZXguanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhlIHJlcXVpcmUgc2NvcGVcbnZhciBfX3dlYnBhY2tfcmVxdWlyZV9fID0ge307XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJleHBvcnQgZnVuY3Rpb24gY2xlYXJDb250ZW50KCkge1xuICAgIGNvbnN0IGNvbnRlbnQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNvbnRlbnRcIik7XG4gICAgY29udGVudC5pbm5lckhUTUwgPSBcIlwiO1xufSIsImltcG9ydCB7IHByb2plY3RzLCBuZXdQcm9qZWN0QnV0dG9uLCBhZGRJdGVtIH0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCB7IGNsZWFyQ29udGVudCB9IGZyb20gXCIuL2NsZWFyQ29udGVudC5qc1wiO1xuaW1wb3J0IHsgZGlzcGxheWVkSXRlbXMsIHNob3dpbmdJdGVtcywgc2hvd0l0ZW0gfSBmcm9tIFwiLi9zaG93aW5nSXRlbXMuanNcIjtcblxuY29uc3QgaW5ib3ggPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImluYm94XCIpO1xubGV0IGluYm94QXJyYXkgPSBbXTtcblxubGV0IGFsbFByb2plY3RzID0gW107XG5hbGxQcm9qZWN0cy5wdXNoKGluYm94KTtcblxubGV0IGFsbFByb2plY3RBcnJheXMgPSBbXTtcbmFsbFByb2plY3RBcnJheXMucHVzaChpbmJveEFycmF5KTtcbmV4cG9ydCBsZXQgYWN0aXZlQXJyYXk7XG5cbmFjdGl2ZUFycmF5ID0gaW5ib3hBcnJheTtcblxuaW5ib3guY2xhc3NMaXN0LmFkZChcImFjdGl2ZS1wcm9qZWN0XCIpO1xuaW5ib3guYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpPT4ge1xuICAgICAgICAgICAgICAgIFxuICAgIGNsZWFyQ29udGVudCgpO1xuXG4gICAgYWRkSXRlbS5kaXNhYmxlZCA9IHRydWU7XG4gICAgYWRkSXRlbS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyZXlcIjtcbiAgICBcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbFByb2plY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFsbFByb2plY3RzW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmUtcHJvamVjdFwiKTtcbiAgICAgICAgYWxsUHJvamVjdHNbaV0uZGlzcGxheWVkID0gZmFsc2U7XG4gICAgICAgIGRpc3BsYXllZEl0ZW1zID0gMDtcbiAgICB9XG5cbiAgICBpbmJveC5jbGFzc0xpc3QuYWRkKFwiYWN0aXZlLXByb2plY3RcIik7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbFByb2plY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChhbGxQcm9qZWN0c1tpXS5jbGFzc0xpc3QuY29udGFpbnMoXCJhY3RpdmUtcHJvamVjdFwiKSkge1xuICAgICAgICAgICAgYWN0aXZlQXJyYXkgPSBhbGxQcm9qZWN0QXJyYXlzW2ldO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmJveEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgaW5ib3hBcnJheVtpXS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgaW5ib3hBcnJheVtpXVtqXS5kaXNwbGF5ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGluYm94QXJyYXlbaV1bal0pO1xuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coXCJkaXNwbGF5ZWRJdGVtczogXCIgKyBkaXNwbGF5ZWRJdGVtcyk7XG4gICAgICAgIGRpc3BsYXllZEl0ZW1zID0gMDtcbiAgICAgICAgc2hvd2luZ0l0ZW1zKGluYm94QXJyYXlbaV0pO1xuICAgIH1cbiAgICBcbn0pO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOZXdQcm9qZWN0KCkge1xuXG4gICAgY29uc3QgcHJvamVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgY29uc3QgcHJvamVjdE5hbWVJbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICBjb25zdCBwcm9qZWN0U2F2ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgY29uc3QgcHJvamVjdEV4aXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIFxuICAgIHByb2plY3RTYXZlLmlubmVyVGV4dCA9IFwiU2F2ZVwiO1xuICAgIHByb2plY3RFeGl0LmlubmVyVGV4dCA9IFwiRXhpdFwiO1xuXG4gICAgcHJvamVjdC5zdHlsZS5wYWRkaW5nID0gXCIzcHhcIjtcblxuICAgIHByb2plY3RTYXZlLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwid2hpdGVcIjtcbiAgICBwcm9qZWN0U2F2ZS5zdHlsZS5tYXhIZWlnaHQgPSBcIjE1cHhcIjtcbiAgICBwcm9qZWN0U2F2ZS5zdHlsZS5tYXhXaWR0aCA9IFwiMTVweFwiO1xuICAgIHByb2plY3RTYXZlLnN0eWxlLmZvbnRTaXplID0gXCIxZW1cIjtcbiAgICBwcm9qZWN0U2F2ZS5zdHlsZS5jb2xvciA9IFwibmF2eVwiO1xuICAgIHByb2plY3RTYXZlLnN0eWxlLm1hcmdpblRvcCA9IFwiNXB4XCI7XG5cbiAgICBwcm9qZWN0RXhpdC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIndoaXRlXCI7XG4gICAgcHJvamVjdEV4aXQuc3R5bGUubWF4SGVpZ2h0ID0gXCIxNXB4XCI7XG4gICAgcHJvamVjdEV4aXQuc3R5bGUubWF4V2lkdGggPSBcIjE1cHhcIjtcbiAgICBwcm9qZWN0RXhpdC5zdHlsZS5mb250U2l6ZSA9IFwiMWVtXCI7XG4gICAgcHJvamVjdEV4aXQuc3R5bGUuY29sb3IgPSBcIm5hdnlcIjtcbiAgICBwcm9qZWN0RXhpdC5zdHlsZS5tYXJnaW5Ub3AgPSBcIjVweFwiO1xuXG4gICAgcHJvamVjdC5hcHBlbmRDaGlsZChwcm9qZWN0TmFtZUlucHV0KTtcbiAgICBwcm9qZWN0LmFwcGVuZENoaWxkKHByb2plY3RFeGl0KTtcbiAgICBwcm9qZWN0LmFwcGVuZENoaWxkKHByb2plY3RTYXZlKTtcblxuICAgIHByb2plY3RTYXZlLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIFxuICAgICAgICBsZXQgbmFtZSA9IHByb2plY3ROYW1lSW5wdXQudmFsdWU7XG4gICAgICAgIFxuICAgICAgICBpZiAobmFtZS5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgICBhbGVydChcIlBsZWFzZSBJbnNlcnQgTmFtZSBGb3IgWW91ciBQcm9qZWN0LlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcHJvamVjdC5pbm5lclRleHQgPSBuYW1lO1xuICAgICAgICAgICAgbmFtZSA9IG5ldyBBcnJheSgpO1xuICAgICAgICAgICAgYWxsUHJvamVjdEFycmF5cy5wdXNoKG5hbWUpO1xuICAgICAgICAgICAgaW5ib3hBcnJheS5wdXNoKG5hbWUpO1xuICAgIFxuICAgICAgICAgICAgcHJvamVjdC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCk9PiB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY2xlYXJDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgYWRkSXRlbS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGFkZEl0ZW0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJuYXZ5XCI7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFsbFByb2plY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsbFByb2plY3RzW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmUtcHJvamVjdFwiKTtcbiAgICAgICAgICAgICAgICAgICAgYWxsUHJvamVjdHNbaV0uZGlzcGxheWVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXllZEl0ZW1zID0gMDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBwcm9qZWN0LmNsYXNzTGlzdC5hZGQoXCJhY3RpdmUtcHJvamVjdFwiKTtcblxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYWxsUHJvamVjdHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsbFByb2plY3RzW2ldLmNsYXNzTGlzdC5jb250YWlucyhcImFjdGl2ZS1wcm9qZWN0XCIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhY3RpdmVBcnJheSA9IGFsbFByb2plY3RBcnJheXNbaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzaG93aW5nSXRlbXMoYWN0aXZlQXJyYXkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgfSk7XG5cbiAgICBwcm9qZWN0RXhpdC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICBwcm9qZWN0cy5yZW1vdmVDaGlsZChwcm9qZWN0KTtcbiAgICB9KVxuXG4gICAgcHJvamVjdHMucmVtb3ZlQ2hpbGQobmV3UHJvamVjdEJ1dHRvbik7XG4gICAgcHJvamVjdHMuYXBwZW5kQ2hpbGQocHJvamVjdCk7XG4gICAgcHJvamVjdHMuYXBwZW5kQ2hpbGQobmV3UHJvamVjdEJ1dHRvbik7XG5cbiAgICBhbGxQcm9qZWN0cy5wdXNoKHByb2plY3QpO1xuXG59IiwiaW1wb3J0IHsgSXRlbSwgZGlhbG9nIH0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCB7IGFjdGl2ZUFycmF5IH0gZnJvbSBcIi4vcHJvamVjdHMuanNcIjtcbmltcG9ydCB7IHNob3dpbmdJdGVtcyB9IGZyb20gXCIuL3Nob3dpbmdJdGVtcy5qc1wiO1xuXG5leHBvcnQgbGV0IHByaW9yaXR5O1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVG9kb0l0ZW1GdW5jIChhY3RpdmVBcnJheSkge1xuICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJ0aXRsZVwiKS52YWx1ZTtcbiAgICBjb25zdCBkZXNjcmlwdGlvbiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZGVzY3JpcHRpb25cIikudmFsdWU7XG4gICAgY29uc3QgZHVlRGF0ZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiZHVlRGF0ZVwiKS52YWx1ZTtcbiAgICBwcmlvcml0eSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwicHJpb3JpdHlcIikudmFsdWU7XG5cbiAgICBpZiAodGl0bGUubGVuZ3RoIDwgMSkge1xuICAgICAgICBhbGVydChcIlBsZWFzZSBJbnNlcnQgYSBUaXRsZS5cIilcbiAgICB9XG5cbiAgICBlbHNlIGlmIChkZXNjcmlwdGlvbi5sZW5ndGggPCAxKSB7XG4gICAgICAgIGFsZXJ0KFwiUGxlYXNlIEluc2VydCBhIERlc2NyaXB0aW9uLlwiKVxuICAgIH1cblxuICAgIGVsc2UgaWYgKGR1ZURhdGUgPT09IFwiXCIpIHtcbiAgICAgICAgYWxlcnQoXCJQbGVhc2UgQ2hvb3NlIFlvdXIgRHVlIERhdGUuXCIpXG4gICAgfVxuXG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBuZXcgSXRlbSh0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByaW9yaXR5KTtcbiAgICAgICAgY29uc29sZS5sb2coaXRlbSk7XG4gICAgICAgIGNvbnNvbGUubG9nKGFjdGl2ZUFycmF5KTtcbiAgICAgICAgYWN0aXZlQXJyYXkucHVzaChpdGVtKTtcbiAgICAgICAgc2hvd2luZ0l0ZW1zKGFjdGl2ZUFycmF5KTtcbiAgICAgICAgZGlhbG9nLmNsb3NlKCk7XG4gICAgfVxuXG5cbn0iLCJpbXBvcnQgeyBwcmlvcml0eSB9IGZyb20gXCIuL2NyZWF0ZVRvZG9JdGVtLmpzXCI7XG5pbXBvcnQgeyBzaG93SXRlbSwgc2hvd2luZ0l0ZW1zIH0gZnJvbSBcIi4vc2hvd2luZ0l0ZW1zLmpzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXR0aW5nUHJpb3JpdHkgKHNob3dJdGVtKSB7XG4gICAgXG4gICAgaWYgKHByaW9yaXR5ID09PSBcImxvd1wiKSB7XG4gICAgICAgIHNob3dJdGVtLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwibGlnaHRibHVlXCI7XG4gICAgfVxuICAgIFxuICAgIGVsc2UgaWYgKHByaW9yaXR5ID09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgc2hvd0l0ZW0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZ2IoNTEsIDEyNiwgMjQ1KVwiO1xuICAgIH1cbiAgICBcbiAgICBlbHNlIHtcbiAgICAgICAgc2hvd0l0ZW0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcbiAgICB9XG59IiwiaW1wb3J0IHsgc2V0dGluZ1ByaW9yaXR5IH0gZnJvbSBcIi4vc2V0dGluZ1ByaW9yaXR5XCI7XG5pbXBvcnQgeyBzaG93SXRlbSB9IGZyb20gXCIuL3Nob3dpbmdJdGVtc1wiO1xuaW1wb3J0IHsgcHJpb3JpdHkgfSBmcm9tIFwiLi9jcmVhdGVUb2RvSXRlbVwiO1xuaW1wb3J0IHsgYWN0aXZlQXJyYXkgfSBmcm9tIFwiLi9wcm9qZWN0c1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tDaGVja2JveChldmVudCkge1xuICAgIHByaW9yaXR5ID0gZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1wcmlvcml0eVwiKTtcblxuICAgIGlmIChldmVudC50YXJnZXQuY2hlY2tlZCA9PT0gdHJ1ZSkge1xuICAgICAgICBldmVudC50YXJnZXQucGFyZW50RWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyZWVuXCI7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRGl2IGlzIGNoZWNrZWRcIik7XG4gICAgICAgIGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtY2hlY2tlZFwiLCBcInRydWVcIik7XG4gICAgICAgIGxldCBpbmRleCA9IGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtaW5kZXhcIik7XG4gICAgICAgIGFjdGl2ZUFycmF5W2luZGV4XS5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgY29uc29sZS5sb2coYWN0aXZlQXJyYXlbaW5kZXhdLmNoZWNrZWQpO1xuICAgIH1cblxuICAgIGVsc2Uge1xuICAgICAgICBpZiAocHJpb3JpdHkgPT09IFwibG93XCIpIHtcbiAgICAgICAgICAgIGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50LnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwibGlnaHRibHVlXCI7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkRpdiBpcyBub3QgY2hlY2tlZFwiKTtcbiAgICAgICAgICAgIGV2ZW50LnRhcmdldC5wYXJlbnRFbGVtZW50LnNldEF0dHJpYnV0ZShcImRhdGEtY2hlY2tlZFwiLCBcImZhbHNlXCIpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBlbHNlIGlmIChwcmlvcml0eSA9PSBcIm5vcm1hbFwiKSB7XG4gICAgICAgICAgICBldmVudC50YXJnZXQucGFyZW50RWxlbWVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJnYig1MSwgMTI2LCAyNDUpXCI7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkRpdiBpcyBub3QgY2hlY2tlZFwiKVxuICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1jaGVja2VkXCIsIFwiZmFsc2VcIik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZXZlbnQudGFyZ2V0LnBhcmVudEVsZW1lbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIjtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRGl2IGlzIG5vdCBjaGVja2VkXCIpXG4gICAgICAgICAgICBldmVudC50YXJnZXQucGFyZW50RWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJkYXRhLWNoZWNrZWRcIiwgXCJmYWxzZVwiKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgaW5kZXggPSBldmVudC50YXJnZXQucGFyZW50RWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLWluZGV4XCIpO1xuICAgICAgICBhY3RpdmVBcnJheVtpbmRleF0uY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICBjb25zb2xlLmxvZyhhY3RpdmVBcnJheVtpbmRleF0uY2hlY2tlZCk7XG4gICAgfVxufSIsImltcG9ydCB7IGFjdGl2ZUFycmF5IH0gZnJvbSBcIi4vcHJvamVjdHMuanNcIjtcbmltcG9ydCB7IHNldHRpbmdQcmlvcml0eSB9IGZyb20gXCIuL3NldHRpbmdQcmlvcml0eVwiO1xuaW1wb3J0IHsgc2hvd0l0ZW0gfSBmcm9tIFwiLi9zaG93aW5nSXRlbXNcIjtcbmltcG9ydCB7IGNvbnRlbnQgfSBmcm9tIFwiLi9zaG93aW5nSXRlbXNcIjtcbmltcG9ydCB7IHByaW9yaXR5IH0gZnJvbSBcIi4vY3JlYXRlVG9kb0l0ZW1cIjtcblxuXG5leHBvcnQgZnVuY3Rpb24gZWRpdFNob3dJdGVtKHNob3dJdGVtKSB7XG5cbiAgICBzaG93SXRlbS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWVkaXRpbmdcIiwgXCJ0cnVlXCIpO1xuICAgIGNvbnNvbGUubG9nKFwiRGl2IElTIGJlaW5nIGVkaXRlZCByaWdodCBub3dcIik7XG5cbiAgICBjb25zdCBpbnB1dFRpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIGNvbnN0IGlucHV0RGVzY3JpcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGV4dGFyZWFcIik7XG4gICAgY29uc3QgaW5wdXREdWVEYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlucHV0XCIpO1xuICAgIGNvbnN0IGlucHV0UHJpb3JpdHkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2VsZWN0XCIpO1xuXG4gICAgY29uc3Qgb3B0aW9uTG93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm9wdGlvblwiKTtcbiAgICBjb25zdCBvcHRpb25Ob3JtYWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuICAgIGNvbnN0IG9wdGlvbkhpZ2ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpO1xuXG4gICAgb3B0aW9uTG93LmlubmVyVGV4dCA9IFwiTG93XCI7XG4gICAgb3B0aW9uTm9ybWFsLmlubmVyVGV4dCA9IFwiTm9ybWFsXCI7XG4gICAgb3B0aW9uSGlnaC5pbm5lclRleHQgPSBcIkhpZ2hcIjtcblxuICAgIG9wdGlvbkxvdy5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLCBcImxvd1wiKTsgXG4gICAgb3B0aW9uTm9ybWFsLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsIFwibm9ybWFsXCIpO1xuICAgIG9wdGlvbkhpZ2guc2V0QXR0cmlidXRlKFwidmFsdWVcIiwgXCJoaWdoXCIpO1xuXG5cbiAgICBjb25zdCBjaGlsZHJlbiA9IHNob3dJdGVtLmNoaWxkcmVuO1xuICAgIGNvbnN0IGNoZWNrYm94ID0gY2hpbGRyZW4uaXRlbSgwKTtcbiAgICBjb25zdCBvcmlnaW5hbFRpdGxlID0gY2hpbGRyZW4uaXRlbSgxKS5pbm5lclRleHQ7XG4gICAgY29uc3Qgb3JpZ2luYWxEZXNjcmlwdGlvbiA9IGNoaWxkcmVuLml0ZW0oMikuaW5uZXJUZXh0O1xuICAgIGNvbnN0IG9yaWdpbmFsRHVlRGF0ZSA9IGNoaWxkcmVuLml0ZW0oMykuaW5uZXJUZXh0O1xuICAgIGNvbnN0IG9yaWdpbmFsUHJpb3JpdHkgPSBzaG93SXRlbS5nZXRBdHRyaWJ1dGUoXCJkYXRhLXByaW9yaXR5XCIpO1xuXG4gICAgY2hlY2tib3guZGlzYWJsZWQgPSB0cnVlO1xuXG4gICAgaW5wdXRUaXRsZS52YWx1ZSA9IG9yaWdpbmFsVGl0bGU7XG4gICAgaW5wdXREZXNjcmlwdGlvbi5pbm5lclRleHQgPSBvcmlnaW5hbERlc2NyaXB0aW9uO1xuICAgIGlucHV0RHVlRGF0ZS52YWx1ZSA9IG9yaWdpbmFsRHVlRGF0ZTtcbiAgICBpbnB1dFByaW9yaXR5LmlubmVyVGV4dCA9IG9yaWdpbmFsUHJpb3JpdHk7XG5cbiAgICBpbnB1dFByaW9yaXR5LmFwcGVuZENoaWxkKG9wdGlvbkxvdyk7XG4gICAgaW5wdXRQcmlvcml0eS5hcHBlbmRDaGlsZChvcHRpb25Ob3JtYWwpO1xuICAgIGlucHV0UHJpb3JpdHkuYXBwZW5kQ2hpbGQob3B0aW9uSGlnaCk7XG4gICAgXG4gICAgaWYgKG9yaWdpbmFsUHJpb3JpdHkgPT0gXCJsb3dcIikge1xuICAgICAgICBvcHRpb25Mb3cuc2VsZWN0ZWQgPSB0cnVlO1xuICAgIH1cbiAgICBcbiAgICBlbHNlIGlmIChvcmlnaW5hbFByaW9yaXR5ID09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgb3B0aW9uTm9ybWFsLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgXG4gICAgZWxzZSBpZiAob3JpZ2luYWxQcmlvcml0eSA9PSBcImhpZ2hcIikge1xuICAgICAgICBvcHRpb25IaWdoLnNlbGVjdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpbnB1dER1ZURhdGUudHlwZSA9IFwiZGF0ZVwiO1xuICAgIFxuICAgIHNob3dJdGVtLmFwcGVuZENoaWxkKGlucHV0VGl0bGUpO1xuICAgIHNob3dJdGVtLmFwcGVuZENoaWxkKGlucHV0RGVzY3JpcHRpb24pO1xuICAgIHNob3dJdGVtLmFwcGVuZENoaWxkKGlucHV0RHVlRGF0ZSk7XG4gICAgc2hvd0l0ZW0uYXBwZW5kQ2hpbGQoaW5wdXRQcmlvcml0eSk7XG5cblxuICAgIHNob3dJdGVtLnJlbW92ZUNoaWxkKGNoaWxkcmVuLml0ZW0oMSkpO1xuICAgIHNob3dJdGVtLnJlbW92ZUNoaWxkKGNoaWxkcmVuLml0ZW0oMSkpO1xuICAgIHNob3dJdGVtLnJlbW92ZUNoaWxkKGNoaWxkcmVuLml0ZW0oMSkpO1xuXG4gICAgY29uc3Qgc2F2ZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgY29uc3QgY2xvc2VCdXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIGNvbnN0IGRlbGV0ZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG5cbiAgICBzYXZlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJlZGl0QnV0dG9uXCIsIFwic2F2ZUVkaXRCdXR0b25cIik7XG4gICAgY2xvc2VCdXR0b24uY2xhc3NMaXN0LmFkZChcImVkaXRCdXR0b25cIiwgXCJjbG9zZUVkaXRCdXR0b25cIik7XG4gICAgZGVsZXRlQnV0dG9uLmNsYXNzTGlzdC5hZGQoXCJlZGl0QnV0dG9uXCIsIFwiZGVsZXRlRWRpdEJ1dHRvblwiKTtcblxuICAgIHNhdmVCdXR0b24uaW5uZXJUZXh0ID0gXCJTYXZlXCI7XG4gICAgY2xvc2VCdXR0b24uaW5uZXJUZXh0ID0gXCJDbG9zZVwiO1xuICAgIGRlbGV0ZUJ1dHRvbi5pbm5lclRleHQgPSBcIkRlbGV0ZVwiO1xuXG4gICAgc2hvd0l0ZW0uYXBwZW5kQ2hpbGQoZGVsZXRlQnV0dG9uKTtcbiAgICBzaG93SXRlbS5hcHBlbmRDaGlsZChjbG9zZUJ1dHRvbik7XG4gICAgc2hvd0l0ZW0uYXBwZW5kQ2hpbGQoc2F2ZUJ1dHRvbik7XG5cbiAgICBkZWxldGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgY29udGVudC5yZW1vdmVDaGlsZChzaG93SXRlbSk7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gcGFyc2VJbnQoc2hvd0l0ZW0uZ2V0QXR0cmlidXRlKFwiZGF0YS1pbmRleFwiKSk7XG4gICAgICAgIGFjdGl2ZUFycmF5LnBvcChhY3RpdmVBcnJheVtpbmRleF0pO1xuICAgICAgICBzaG93SXRlbS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWVkaXRpbmdcIiwgXCJmYWxzZVwiKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJEaXYgSVMgTk9UIGJlaW5nIGVkaXRlZCByaWdodCBub3cuXCIpO1xuICAgIH0pO1xuXG4gICAgY2xvc2VCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgY29uc3QgbmV3VGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDNcIik7XG4gICAgICAgIGNvbnN0IG5ld0Rlc2NyaXB0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG4gICAgICAgIGNvbnN0IG5ld0R1ZURhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwicFwiKTtcbiAgICAgICAgY29uc3QgbmV3UHJpb3JpdHkgPSBzaG93SXRlbS5zZXRBdHRyaWJ1dGUoXCJkYXRhLXByaW9yaXR5XCIsIG9yaWdpbmFsUHJpb3JpdHkpO1xuXG4gICAgICAgIG5ld1RpdGxlLmlubmVyVGV4dCA9IG9yaWdpbmFsVGl0bGU7XG4gICAgICAgIG5ld0Rlc2NyaXB0aW9uLmlubmVyVGV4dCA9IG9yaWdpbmFsRGVzY3JpcHRpb247XG4gICAgICAgIG5ld0Rlc2NyaXB0aW9uLnN0eWxlLmZvbnRTdHlsZSA9IFwiaXRhbGljXCI7XG4gICAgICAgIG5ld0R1ZURhdGUuaW5uZXJUZXh0ID0gb3JpZ2luYWxEdWVEYXRlO1xuXG4gICAgICAgIHNob3dJdGVtLmFwcGVuZENoaWxkKG5ld1RpdGxlKTtcbiAgICAgICAgc2hvd0l0ZW0uYXBwZW5kQ2hpbGQobmV3RGVzY3JpcHRpb24pO1xuICAgICAgICBzaG93SXRlbS5hcHBlbmRDaGlsZChuZXdEdWVEYXRlKTtcblxuICAgICAgICBzaG93SXRlbS5yZW1vdmVDaGlsZChpbnB1dFRpdGxlKTtcbiAgICAgICAgc2hvd0l0ZW0ucmVtb3ZlQ2hpbGQoaW5wdXREZXNjcmlwdGlvbik7XG4gICAgICAgIHNob3dJdGVtLnJlbW92ZUNoaWxkKGlucHV0RHVlRGF0ZSk7XG4gICAgICAgIHNob3dJdGVtLnJlbW92ZUNoaWxkKGlucHV0UHJpb3JpdHkpO1xuXG4gICAgICAgIHNob3dJdGVtLnJlbW92ZUNoaWxkKHNhdmVCdXR0b24pO1xuICAgICAgICBzaG93SXRlbS5yZW1vdmVDaGlsZChjbG9zZUJ1dHRvbik7XG4gICAgICAgIHNob3dJdGVtLnJlbW92ZUNoaWxkKGRlbGV0ZUJ1dHRvbik7XG5cbiAgICAgICAgY2hlY2tib3guZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgICAgICBzaG93SXRlbS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWVkaXRpbmdcIiwgXCJmYWxzZVwiKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJEaXYgSVMgTk9UIGJlaW5nIGVkaXRlZCByaWdodCBub3cuXCIpO1xuICAgIH0pXG5cbiAgICBzYXZlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1RpdGxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImgzXCIpO1xuICAgICAgICBjb25zdCBuZXdEZXNjcmlwdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJwXCIpO1xuICAgICAgICBjb25zdCBuZXdEdWVEYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInBcIik7XG5cbiAgICAgICAgbmV3VGl0bGUuaW5uZXJUZXh0ID0gaW5wdXRUaXRsZS52YWx1ZTtcbiAgICAgICAgbmV3RGVzY3JpcHRpb24uaW5uZXJUZXh0ID0gaW5wdXREZXNjcmlwdGlvbi52YWx1ZTtcbiAgICAgICAgbmV3RGVzY3JpcHRpb24uc3R5bGUuZm9udFN0eWxlID0gXCJpdGFsaWNcIjtcbiAgICAgICAgbmV3RHVlRGF0ZS5pbm5lclRleHQgPSBpbnB1dER1ZURhdGUudmFsdWU7XG5cbiAgICAgICAgY29uc3QgaW5kZXggPSBwYXJzZUludChzaG93SXRlbS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWluZGV4XCIpKTtcbiAgICAgICAgYWN0aXZlQXJyYXlbaW5kZXhdLnRpdGxlID0gaW5wdXRUaXRsZS52YWx1ZTtcbiAgICAgICAgYWN0aXZlQXJyYXlbaW5kZXhdLmRlc2NyaXB0aW9uID0gaW5wdXREZXNjcmlwdGlvbi52YWx1ZTtcbiAgICAgICAgYWN0aXZlQXJyYXlbaW5kZXhdLmR1ZURhdGU9IGlucHV0RHVlRGF0ZS52YWx1ZTtcbiAgICAgICAgYWN0aXZlQXJyYXlbaW5kZXhdLnByaW9yaXR5ID0gaW5wdXRQcmlvcml0eS52YWx1ZTtcblxuICAgICAgICBwcmlvcml0eSA9IGlucHV0UHJpb3JpdHkudmFsdWU7XG5cbiAgICAgICAgc2V0dGluZ1ByaW9yaXR5KHNob3dJdGVtKTtcblxuICAgICAgICBjb25zdCBuZXdQcmlvcml0eSA9IHNob3dJdGVtLnNldEF0dHJpYnV0ZShcImRhdGEtcHJpb3JpdHlcIiwgaW5wdXRQcmlvcml0eS52YWx1ZSk7XG5cbiAgICAgICAgY29uc29sZS5sb2coYWN0aXZlQXJyYXlbaW5kZXhdKTtcbiAgICAgICAgY29uc29sZS5sb2coXCJTYXZlZCBpdGVtJ3MgcHJpb3JpdHkgaXM6IFwiICsgYWN0aXZlQXJyYXlbaW5kZXhdLnByaW9yaXR5KTtcblxuICAgICAgICBzaG93SXRlbS5hcHBlbmRDaGlsZChuZXdUaXRsZSk7XG4gICAgICAgIHNob3dJdGVtLmFwcGVuZENoaWxkKG5ld0Rlc2NyaXB0aW9uKTtcbiAgICAgICAgc2hvd0l0ZW0uYXBwZW5kQ2hpbGQobmV3RHVlRGF0ZSk7XG5cbiAgICAgICAgc2hvd0l0ZW0ucmVtb3ZlQ2hpbGQoaW5wdXRUaXRsZSk7XG4gICAgICAgIHNob3dJdGVtLnJlbW92ZUNoaWxkKGlucHV0RGVzY3JpcHRpb24pO1xuICAgICAgICBzaG93SXRlbS5yZW1vdmVDaGlsZChpbnB1dER1ZURhdGUpO1xuICAgICAgICBzaG93SXRlbS5yZW1vdmVDaGlsZChpbnB1dFByaW9yaXR5KTtcblxuICAgICAgICBzaG93SXRlbS5yZW1vdmVDaGlsZChzYXZlQnV0dG9uKTtcbiAgICAgICAgc2hvd0l0ZW0ucmVtb3ZlQ2hpbGQoY2xvc2VCdXR0b24pO1xuICAgICAgICBzaG93SXRlbS5yZW1vdmVDaGlsZChkZWxldGVCdXR0b24pO1xuXG4gICAgICAgIGNoZWNrYm94LmRpc2FibGVkID0gZmFsc2U7XG5cbiAgICAgICAgc2hvd0l0ZW0uc2V0QXR0cmlidXRlKFwiZGF0YS1lZGl0aW5nXCIsIFwiZmFsc2VcIik7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiRGl2IElTIE5PVCBiZWluZyBlZGl0ZWQgcmlnaHQgbm93LlwiKTtcbiAgICB9KTtcblxufSIsImltcG9ydCB7IGNoZWNrQ2hlY2tib3ggfSBmcm9tIFwiLi9jaGVja0NoZWNrYm94LmpzXCI7XG5pbXBvcnQgeyBwcmlvcml0eSB9IGZyb20gXCIuL2NyZWF0ZVRvZG9JdGVtLmpzXCI7XG5pbXBvcnQgeyBlZGl0U2hvd0l0ZW0gfSBmcm9tIFwiLi9lZGl0U2hvd0l0ZW0uanNcIjtcbmltcG9ydCB7IGFjdGl2ZUFycmF5IH0gZnJvbSBcIi4vaW5kZXguanNcIjtcbmltcG9ydCB7IHNldHRpbmdQcmlvcml0eSB9IGZyb20gXCIuL3NldHRpbmdQcmlvcml0eS5qc1wiO1xuXG5jb25zdCBjb250ZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjb250ZW50XCIpO1xuZXhwb3J0IHsgY29udGVudCB9O1xuZXhwb3J0IGxldCBzaG93SXRlbTtcblxuZXhwb3J0IGxldCBkaXNwbGF5ZWRJdGVtcyA9IDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaG93aW5nSXRlbXMoYWN0aXZlQXJyYXkpIHtcblxuICAgIGZvciAobGV0IGkgPSBkaXNwbGF5ZWRJdGVtczsgaSA8IGFjdGl2ZUFycmF5Lmxlbmd0aDsgaSsrKSB7XG5cbiAgICAgICAgc2hvd0l0ZW0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjb25zdCBjaGVja2JveCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcbiAgICAgICAgY2hlY2tib3gudHlwZSA9IFwiY2hlY2tib3hcIjtcbiAgICAgICAgY2hlY2tib3guY2xhc3NMaXN0LmFkZChcImNoZWNrYm94XCIpO1xuICAgICAgICBjb25zdCBzaG93VGl0bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjb25zdCBzaG93RGVzY3JpcHRpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICBjb25zdCBzaG93RHVlRGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHNob3dUaXRsZS5pbm5lckhUTUwgPVwiPGgzPlwiICsgYWN0aXZlQXJyYXlbaV0udGl0bGUgKyBcIjwvaDM+XCI7XG4gICAgICAgIHNob3dEZXNjcmlwdGlvbi5pbm5lckhUTUwgPVwiPHA+XCIgKyBhY3RpdmVBcnJheVtpXS5kZXNjcmlwdGlvbiArIFwiPC9wPlwiO1xuICAgICAgICBzaG93RHVlRGF0ZS5pbm5lckhUTUwgPVwiPHA+XCIgKyBhY3RpdmVBcnJheVtpXS5kdWVEYXRlICsgXCI8L3A+XCI7XG4gICAgXG4gICAgICAgIHByaW9yaXR5ID0gYWN0aXZlQXJyYXlbaV0ucHJpb3JpdHk7XG5cbiAgICAgICAgc2V0dGluZ1ByaW9yaXR5KHNob3dJdGVtKTtcbiAgICBcbiAgICAgICAgc2hvd0l0ZW0uc2V0QXR0cmlidXRlKFwiZGF0YS1wcmlvcml0eVwiLCBwcmlvcml0eSk7XG4gICAgICAgIHNob3dJdGVtLnNldEF0dHJpYnV0ZShcImRhdGEtaW5kZXhcIiwgaSk7XG4gICAgICAgIHNob3dJdGVtLnNldEF0dHJpYnV0ZShcImRhdGEtY2hlY2tlZFwiLCBcImZhbHNlXCIpO1xuICAgICAgICBzaG93SXRlbS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWVkaXRpbmdcIiwgXCJmYWxzZVwiKTtcblxuICAgICAgICBpZiAoYWN0aXZlQXJyYXlbaV0uY2hlY2tlZCA9PSB0cnVlKSB7XG4gICAgICAgICAgICBjaGVja2JveC5jaGVja2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHNob3dJdGVtLnNldEF0dHJpYnV0ZShcImRhdGEtY2hlY2tlZFwiLCBcInRydWVcIik7XG4gICAgICAgICAgICBzaG93SXRlbS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyZWVuXCI7XG4gICAgICAgIH1cblxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNoZWNrYm94LmNoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHNob3dJdGVtLnNldEF0dHJpYnV0ZShcImRhdGEtY2hlY2tlZFwiLCBcImZhbHNlXCIpO1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHNob3dJdGVtLmFwcGVuZENoaWxkKGNoZWNrYm94KTtcbiAgICAgICAgc2hvd0l0ZW0uYXBwZW5kQ2hpbGQoc2hvd1RpdGxlKTtcbiAgICAgICAgc2hvd0l0ZW0uYXBwZW5kQ2hpbGQoc2hvd0Rlc2NyaXB0aW9uKTtcbiAgICAgICAgc2hvd0l0ZW0uYXBwZW5kQ2hpbGQoc2hvd0R1ZURhdGUpO1xuICAgICAgICBzaG93SXRlbS5jbGFzc0xpc3QuYWRkKFwic2hvd0l0ZW1EaXZcIik7XG4gICAgICAgIHNob3dEZXNjcmlwdGlvbi5jbGFzc0xpc3QuYWRkKFwic2hvd0Rlc2NyaXB0aW9uXCIpO1xuICAgIFxuICAgICAgICBjb250ZW50LmFwcGVuZENoaWxkKHNob3dJdGVtKTtcbiAgICBcbiAgICAgICAgY2hlY2tib3guYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjaGVja0NoZWNrYm94KTtcbiAgICBcbiAgICAgICAgc2hvd0l0ZW0uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIChlKSA9PiB7XG4gICAgICAgICAgICBpZiAoZS50YXJnZXQgPT0gc2hvd0l0ZW0pIHtcbiAgICAgICAgICAgICAgICBpZiAoc2hvd0l0ZW0uZ2V0QXR0cmlidXRlKFwiZGF0YS1jaGVja2VkXCIpID09IFwiZmFsc2VcIiAmJiBzaG93SXRlbS5nZXRBdHRyaWJ1dGUoXCJkYXRhLWVkaXRpbmdcIikgPT0gXCJmYWxzZVwiKSB7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRTaG93SXRlbShlLnRhcmdldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBhY3RpdmVBcnJheVtpXS5kaXNwbGF5ZWQgPSB0cnVlO1xuICAgICAgICBkaXNwbGF5ZWRJdGVtcysrO1xuICAgIFxuICAgIH1cbiAgICBcbn0iLCJpbXBvcnQgeyBzaG93aW5nSXRlbXMgfSBmcm9tIFwiLi9zaG93aW5nSXRlbXMuanNcIjtcbmltcG9ydCB7IGNyZWF0ZVRvZG9JdGVtRnVuYyB9IGZyb20gIFwiLi9jcmVhdGVUb2RvSXRlbS5qc1wiO1xuaW1wb3J0IHsgY2xlYXJDb250ZW50IH0gZnJvbSBcIi4vY2xlYXJDb250ZW50LmpzXCI7XG5pbXBvcnQgeyBhY3RpdmVBcnJheSwgY3JlYXRlTmV3UHJvamVjdCB9IGZyb20gXCIuL3Byb2plY3RzLmpzXCI7XG5cbmNvbnN0IGRpYWxvZyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZGlhbG9nXCIpWzBdO1xuZXhwb3J0IHsgZGlhbG9nIH07XG5leHBvcnQgY29uc3QgYWRkSXRlbSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYWRkSXRlbVwiKTtcbmFkZEl0ZW0uZGlzYWJsZWQgPSB0cnVlO1xuXG5pZiAoYWRkSXRlbS5kaXNhYmxlZCA9PSB0cnVlKSB7XG4gICAgYWRkSXRlbS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcImdyZXlcIjtcbn1cblxuZWxzZSB7XG4gICAgYWRkSXRlbS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcIm5hdnlcIjtcbn1cblxuY29uc3QgY2xvc2VEaWFsb2cgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNsb3NlRGlhbG9nXCIpO1xuXG5jb25zdCBmb3JtID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJmb3JtXCIpWzBdO1xuXG5hZGRJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCk9PiB7XG4gICAgZGlhbG9nLnNob3dNb2RhbCgpO1xuICAgIGZvcm0ucmVzZXQoKTtcbn0pO1xuXG5jbG9zZURpYWxvZy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpPT4ge1xuICAgIGRpYWxvZy5jbG9zZSgpO1xufSk7XG5cbmV4cG9ydCBjbGFzcyBJdGVtIHtcbiAgICBjb25zdHJ1Y3Rvcih0aXRsZSwgZGVzY3JpcHRpb24sIGR1ZURhdGUsIHByaW9yaXR5KSB7XG4gICAgICAgIHRoaXMudGl0bGUgPSB0aXRsZTtcbiAgICAgICAgdGhpcy5kZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xuICAgICAgICB0aGlzLmR1ZURhdGUgPSBkdWVEYXRlO1xuICAgICAgICB0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7XG4gICAgfTtcbn1cblxuY29uc3QgY3JlYXRlVG9kb0l0ZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImNyZWF0ZVRvZG9JdGVtXCIpO1xuXG5jcmVhdGVUb2RvSXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBjcmVhdGVUb2RvSXRlbUZ1bmMoYWN0aXZlQXJyYXkpO1xufSk7XG5cbmV4cG9ydCBjb25zdCBuZXdQcm9qZWN0QnV0dG9uID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJuZXdQcm9qZWN0XCIpO1xuZXhwb3J0IGNvbnN0IHByb2plY3RzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJwcm9qZWN0c1wiKTtcblxubmV3UHJvamVjdEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgY3JlYXRlTmV3UHJvamVjdCkiXSwibmFtZXMiOlsiX193ZWJwYWNrX3JlcXVpcmVfXyIsImV4cG9ydHMiLCJkZWZpbml0aW9uIiwia2V5IiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsIm9iaiIsInByb3AiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJjbGVhckNvbnRlbnQiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiaW5uZXJIVE1MIiwiaW5ib3giLCJpbmJveEFycmF5IiwiYWxsUHJvamVjdHMiLCJwdXNoIiwiYWN0aXZlQXJyYXkiLCJwcmlvcml0eSIsImFsbFByb2plY3RBcnJheXMiLCJzZXR0aW5nUHJpb3JpdHkiLCJzaG93SXRlbSIsInN0eWxlIiwiYmFja2dyb3VuZENvbG9yIiwiY2hlY2tDaGVja2JveCIsImV2ZW50IiwidGFyZ2V0IiwicGFyZW50RWxlbWVudCIsImdldEF0dHJpYnV0ZSIsImNoZWNrZWQiLCJjb25zb2xlIiwibG9nIiwic2V0QXR0cmlidXRlIiwiaW5kZXgiLCJlZGl0U2hvd0l0ZW0iLCJpbnB1dFRpdGxlIiwiY3JlYXRlRWxlbWVudCIsImlucHV0RGVzY3JpcHRpb24iLCJpbnB1dER1ZURhdGUiLCJpbnB1dFByaW9yaXR5Iiwib3B0aW9uTG93Iiwib3B0aW9uTm9ybWFsIiwib3B0aW9uSGlnaCIsImlubmVyVGV4dCIsImNoaWxkcmVuIiwiY2hlY2tib3giLCJpdGVtIiwib3JpZ2luYWxUaXRsZSIsIm9yaWdpbmFsRGVzY3JpcHRpb24iLCJvcmlnaW5hbER1ZURhdGUiLCJvcmlnaW5hbFByaW9yaXR5IiwiZGlzYWJsZWQiLCJ2YWx1ZSIsImFwcGVuZENoaWxkIiwic2VsZWN0ZWQiLCJ0eXBlIiwicmVtb3ZlQ2hpbGQiLCJzYXZlQnV0dG9uIiwiY2xvc2VCdXR0b24iLCJkZWxldGVCdXR0b24iLCJjbGFzc0xpc3QiLCJhZGQiLCJhZGRFdmVudExpc3RlbmVyIiwiY29udGVudCIsInBhcnNlSW50IiwicG9wIiwibmV3VGl0bGUiLCJuZXdEZXNjcmlwdGlvbiIsIm5ld0R1ZURhdGUiLCJmb250U3R5bGUiLCJ0aXRsZSIsImRlc2NyaXB0aW9uIiwiZHVlRGF0ZSIsImFkZEl0ZW0iLCJpIiwibGVuZ3RoIiwicmVtb3ZlIiwiZGlzcGxheWVkIiwiZGlzcGxheWVkSXRlbXMiLCJjb250YWlucyIsImoiLCJzaG93aW5nSXRlbXMiLCJzaG93VGl0bGUiLCJzaG93RGVzY3JpcHRpb24iLCJzaG93RHVlRGF0ZSIsImUiLCJkaWFsb2ciLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImNsb3NlRGlhbG9nIiwic2hvd01vZGFsIiwicmVzZXQiLCJjbG9zZSIsIkl0ZW0iLCJjb25zdHJ1Y3RvciIsInRoaXMiLCJhbGVydCIsImNyZWF0ZVRvZG9JdGVtRnVuYyIsIm5ld1Byb2plY3RCdXR0b24iLCJwcm9qZWN0cyIsInByb2plY3QiLCJwcm9qZWN0TmFtZUlucHV0IiwicHJvamVjdFNhdmUiLCJwcm9qZWN0RXhpdCIsInBhZGRpbmciLCJtYXhIZWlnaHQiLCJtYXhXaWR0aCIsImZvbnRTaXplIiwiY29sb3IiLCJtYXJnaW5Ub3AiLCJuYW1lIiwiQXJyYXkiXSwic291cmNlUm9vdCI6IiJ9