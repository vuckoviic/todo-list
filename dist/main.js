(()=>{"use strict";var e={d:(t,n)=>{for(var l in n)e.o(n,l)&&!e.o(t,l)&&Object.defineProperty(t,l,{enumerable:!0,get:n[l]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};function t(){document.getElementById("content").innerHTML=""}function n(e){e.setAttribute("data-editing","true"),console.log("Div IS being edited right now");const t=document.createElement("input"),n=document.createElement("textarea"),l=document.createElement("input"),i=document.createElement("select"),d=document.createElement("option"),a=document.createElement("option"),r=document.createElement("option");d.innerText="Low",a.innerText="Normal",r.innerText="High",d.setAttribute("value","low"),a.setAttribute("value","normal"),r.setAttribute("value","high");const p=e.children,u=p.item(0),h=p.item(1).innerText,g=p.item(2).innerText,v=p.item(3).innerText,y=e.getAttribute("data-priority");u.disabled=!0,t.value=h,n.innerText=g,l.value=v,i.innerText=y,i.appendChild(d),i.appendChild(a),i.appendChild(r),"low"==y?d.selected=!0:"normal"==y?a.selected=!0:"high"==y&&(r.selected=!0),l.type="date",e.appendChild(t),e.appendChild(n),e.appendChild(l),e.appendChild(i),e.removeChild(p.item(1)),e.removeChild(p.item(1)),e.removeChild(p.item(1));const b=document.createElement("button"),C=document.createElement("button"),E=document.createElement("button");b.classList.add("editButton","saveEditButton"),C.classList.add("editButton","closeEditButton"),E.classList.add("editButton","deleteEditButton"),b.innerText="Save",C.innerText="Close",E.innerText="Delete",e.appendChild(E),e.appendChild(C),e.appendChild(b),E.addEventListener("click",(()=>{m.removeChild(e);const t=parseInt(e.getAttribute("data-index"));o.pop(o[t]),e.setAttribute("data-editing","false"),console.log("Div IS NOT being edited right now.")})),C.addEventListener("click",(()=>{const d=document.createElement("h3"),o=document.createElement("p"),a=document.createElement("p");e.setAttribute("data-priority",y),d.innerText=h,o.innerText=g,o.style.fontStyle="italic",a.innerText=v,e.appendChild(d),e.appendChild(o),e.appendChild(a),e.removeChild(t),e.removeChild(n),e.removeChild(l),e.removeChild(i),e.removeChild(b),e.removeChild(C),e.removeChild(E),u.disabled=!1,e.setAttribute("data-editing","false"),console.log("Div IS NOT being edited right now.")})),b.addEventListener("click",(()=>{const d=document.createElement("h3"),a=document.createElement("p"),r=document.createElement("p");d.innerText=t.value,a.innerText=n.value,a.style.fontStyle="italic",r.innerText=l.value;const p=parseInt(e.getAttribute("data-index"));o[p].title=t.value,o[p].description=n.value,o[p].dueDate=l.value,o[p].priority=i.value,c=i.value,s(e),e.setAttribute("data-priority",i.value),console.log(o[p]),console.log("Saved item's priority is: "+o[p].priority),e.appendChild(d),e.appendChild(a),e.appendChild(r),e.removeChild(t),e.removeChild(n),e.removeChild(l),e.removeChild(i),e.removeChild(b),e.removeChild(C),e.removeChild(E),u.disabled=!1,e.setAttribute("data-editing","false"),console.log("Div IS NOT being edited right now.")}))}e.d({},{q7:()=>k,B5:()=>b,r3:()=>y,OS:()=>L,ar:()=>x,dt:()=>f});const l=document.getElementById("inbox");let i=[],d=[];d.push(l);let o,a=[];a.push(i),o=i;const r=document.getElementById("content");let c;function s(e){e.style.backgroundColor="low"===c?"lightblue":"normal"==c?"rgb(51, 126, 245)":"red"}function p(e){if(c=e.target.parentElement.getAttribute("data-priority"),!0===e.target.checked){e.target.parentElement.style.backgroundColor="green",console.log("Div is checked"),e.target.parentElement.setAttribute("data-checked","true");let t=e.target.parentElement.getAttribute("data-index");o[t].checked=!0,console.log(o[t].checked)}else{"low"===c?(e.target.parentElement.style.backgroundColor="lightblue",console.log("Div is not checked"),e.target.parentElement.setAttribute("data-checked","false")):"normal"==c?(e.target.parentElement.style.backgroundColor="rgb(51, 126, 245)",console.log("Div is not checked"),e.target.parentElement.setAttribute("data-checked","false")):(e.target.parentElement.style.backgroundColor="red",console.log("Div is not checked"),e.target.parentElement.setAttribute("data-checked","false"));let t=e.target.parentElement.getAttribute("data-index");o[t].checked=!1,console.log(o[t].checked)}}l.classList.add("active-project"),l.addEventListener("click",(()=>{t(),b.disabled=!0,b.style.backgroundColor="grey";for(let e=0;e<d.length;e++)d[e].classList.remove("active-project"),d[e].displayed=!1,g=0;l.classList.add("active-project");for(let e=0;e<d.length;e++)d[e].classList.contains("active-project")&&(o=a[e]);for(let e=0;e<i.length;e++){for(let t=0;t<i[e].length;t++)i[e][t].displayed=!1,console.log(i[e][t]);console.log("displayedItems: "+g),g=0,v(i[e])}r.appendChild(L),r.firstChild.firstChild.disabled=!0}));const m=document.getElementById("content");let u;const h=document.getElementById("inbox");let g=0;function v(e){for(let t=g;t<e.length;t++){u=document.createElement("div");const l=document.createElement("input");l.type="checkbox",l.classList.add("checkbox");const i=document.createElement("div"),d=document.createElement("div"),o=document.createElement("div");i.innerHTML="<h3>"+e[t].title+"</h3>",d.innerHTML="<p>"+e[t].description+"</p>",o.innerHTML="<p>"+e[t].dueDate+"</p>",c=e[t].priority,s(u),u.setAttribute("data-priority",c),u.setAttribute("data-index",t),u.setAttribute("data-checked","false"),u.setAttribute("data-editing","false"),1==e[t].checked?(l.checked=!0,u.setAttribute("data-checked","true"),u.style.backgroundColor="green"):(l.checked=!1,u.setAttribute("data-checked","false")),u.appendChild(l),u.appendChild(i),u.appendChild(d),u.appendChild(o),u.classList.add("showItemDiv"),d.classList.add("showDescription"),m.appendChild(u),l.addEventListener("click",p),u.addEventListener("click",(e=>{e.target==u&&"false"==u.getAttribute("data-checked")&&"false"==u.getAttribute("data-editing")&&0==h.classList.contains("active-project")&&n(e.target)})),e[t].displayed=!0,g++}}const y=document.getElementsByTagName("dialog")[0],b=document.getElementById("addItem");b.disabled=!0,1==b.disabled?b.style.backgroundColor="grey":b.style.backgroundColor="navy";const C=document.getElementById("closeDialog"),E=document.getElementsByTagName("form")[0];b.addEventListener("click",(()=>{y.showModal(),E.reset()})),C.addEventListener("click",(()=>{y.close()}));class k{constructor(e,t,n,l){this.title=e,this.description=t,this.dueDate=n,this.priority=l}}document.getElementById("createTodoItem").addEventListener("click",(()=>{!function(e){const t=document.getElementById("title").value,n=document.getElementById("description").value,l=document.getElementById("dueDate").value;if(c=document.getElementById("priority").value,t.length<1)alert("Please Insert a Title.");else if(n.length<1)alert("Please Insert a Description.");else if(""===l)alert("Please Choose Your Due Date.");else{const i=new k(t,n,l,c);console.log(i),console.log(e),e.push(i),v(e),y.close()}}(o)}));const x=document.getElementById("newProject"),f=document.getElementById("projects");x.addEventListener("click",(function(){const e=document.createElement("div"),n=document.createElement("button"),l=document.createElement("input"),c=document.createElement("button"),s=document.createElement("button");c.innerText="Save",s.innerText="Exit",n.style.padding="3px",c.style.backgroundColor="white",c.style.maxHeight="15px",c.style.maxWidth="15px",c.style.fontSize="1em",c.style.color="navy",c.style.marginTop="5px",s.style.backgroundColor="white",s.style.maxHeight="15px",s.style.maxWidth="15px",s.style.fontSize="1em",s.style.color="navy",s.style.marginTop="5px",n.appendChild(l),n.appendChild(s),n.appendChild(c),e.appendChild(n),c.addEventListener("click",(()=>{let c=l.value;if(c.length<1)alert("Please Insert Name For Your Project.");else{n.innerText=c,c=new Array,a.push(c),i.push(c),n.addEventListener("click",(e=>{t(),b.disabled=!1,b.style.backgroundColor="navy";for(let e=0;e<d.length;e++)d[e].classList.remove("active-project"),d[e].displayed=!1,g=0;n.classList.add("active-project");for(let e=0;e<d.length;e++)d[e].classList.contains("active-project")&&(o=a[e]);v(o)}));const l=document.createElement("button");l.innerText="â†»",l.addEventListener("click",(()=>{e.innerHTML="",e.appendChild(n);for(let t=0;t<c.length;t++){const n=document.createElement("p");n.innerText=`${c[t].title} | ${c[t].dueDate}`,1==r.firstChild.firstChild.checked?n.style.backgroundColor="green":"low"==c[t].priority?n.style.backgroundColor="lightblue":"normal"==c[t].priority?n.style.backgroundColor="rgb(51, 126, 245)":n.style.backgroundColor="red",n.style.padding="2px",n.style.marginTop="3px",e.appendChild(n)}})),l.classList.add("refresh-project"),n.appendChild(l)}})),s.addEventListener("click",(()=>{f.removeChild(n),f.removeChild(e)})),f.removeChild(x),f.appendChild(e),f.appendChild(x),d.push(n)}));const T=document.getElementById("content"),L=document.createElement("p");L.innerHTML="The inbox section is for <b>review only</b>. You can't create, edit or check todo items here. You need to create separate project for that.",L.style.fontStyle="italic",L.style.position="absolute",L.style.bottom="5px",T.style.position="relative",T.appendChild(L)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,