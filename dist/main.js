(()=>{"use strict";var e={d:(t,n)=>{for(var i in n)e.o(n,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:n[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};function t(){document.getElementById("content").innerHTML=""}e.d({},{q7:()=>C,r3:()=>g,ar:()=>b,dt:()=>x});const n=document.getElementById("inbox");let i=[],l=[];l.push(n);let d,a,o=[];function r(e){e.style.backgroundColor="low"===a?"lightblue":"normal"==a?"rgb(51, 126, 245)":"red"}function c(e){a=e.target.parentElement.getAttribute("data-priority"),!0===e.target.checked?(e.target.parentElement.style.backgroundColor="green",console.log("Div is checked"),e.target.parentElement.setAttribute("data-checked","true")):"low"===a?(e.target.parentElement.style.backgroundColor="lightblue",console.log("Div is not checked"),e.target.parentElement.setAttribute("data-checked","false")):"normal"==a?(e.target.parentElement.style.backgroundColor="rgb(51, 126, 245)",console.log("Div is not checked"),e.target.parentElement.setAttribute("data-checked","false")):(e.target.parentElement.style.backgroundColor="red",console.log("Div is not checked"),e.target.parentElement.setAttribute("data-checked","false"))}function s(e){e.setAttribute("data-editing","true"),console.log("Div IS being edited right now");const t=document.createElement("input"),n=document.createElement("textarea"),i=document.createElement("input"),l=document.createElement("select"),o=document.createElement("option"),c=document.createElement("option"),s=document.createElement("option");o.innerText="Low",c.innerText="Normal",s.innerText="High",o.setAttribute("value","low"),c.setAttribute("value","normal"),s.setAttribute("value","high");const u=e.children,p=u.item(0),h=u.item(1).innerText,g=u.item(2).innerText,v=u.item(3).innerText,E=e.getAttribute("data-priority");p.disabled=!0,t.value=h,n.innerText=g,i.value=v,l.innerText=E,l.appendChild(o),l.appendChild(c),l.appendChild(s),"low"==E?o.selected=!0:"normal"==E?c.selected=!0:"high"==E&&(s.selected=!0),i.type="date",e.appendChild(t),e.appendChild(n),e.appendChild(i),e.appendChild(l),e.removeChild(u.item(1)),e.removeChild(u.item(1)),e.removeChild(u.item(1));const y=document.createElement("button"),C=document.createElement("button"),b=document.createElement("button");y.classList.add("editButton","saveEditButton"),C.classList.add("editButton","closeEditButton"),b.classList.add("editButton","deleteEditButton"),y.innerText="Save",C.innerText="Close",b.innerText="Delete",e.appendChild(b),e.appendChild(C),e.appendChild(y),b.addEventListener("click",(()=>{m.removeChild(e);const t=parseInt(e.getAttribute("data-index"));d.pop(d[t]),e.setAttribute("data-editing","false"),console.log("Div IS NOT being edited right now.")})),C.addEventListener("click",(()=>{const d=document.createElement("h3"),a=document.createElement("p"),o=document.createElement("p");e.setAttribute("data-priority",E),d.innerText=h,a.innerText=g,a.style.fontStyle="italic",o.innerText=v,e.appendChild(d),e.appendChild(a),e.appendChild(o),e.removeChild(t),e.removeChild(n),e.removeChild(i),e.removeChild(l),e.removeChild(y),e.removeChild(C),e.removeChild(b),p.disabled=!1,e.setAttribute("data-editing","false"),console.log("Div IS NOT being edited right now.")})),y.addEventListener("click",(()=>{const o=document.createElement("h3"),c=document.createElement("p"),s=document.createElement("p");o.innerText=t.value,c.innerText=n.value,c.style.fontStyle="italic",s.innerText=i.value;const m=parseInt(e.getAttribute("data-index"));d[m].title=t.value,d[m].description=n.value,d[m].dueDate=i.value,d[m].priority=l.value,a=l.value,r(e),e.setAttribute("data-priority",l.value),console.log(d[m]),console.log("Saved item's priority is: "+d[m].priority),e.appendChild(o),e.appendChild(c),e.appendChild(s),e.removeChild(t),e.removeChild(n),e.removeChild(i),e.removeChild(l),e.removeChild(y),e.removeChild(C),e.removeChild(b),p.disabled=!1,e.setAttribute("data-editing","false"),console.log("Div IS NOT being edited right now.")}))}o.push(i),d=i,n.classList.add("active-project"),n.addEventListener("click",(()=>{t();for(let e=0;e<l.length;e++)l[e].classList.remove("active-project"),l[e].displayed=!1,p=0;n.classList.add("active-project");for(let e=0;e<l.length;e++)l[e].classList.contains("active-project")&&(d=o[e]);h(d)}));const m=document.getElementById("content");let u,p=0;function h(e){for(let t=p;t<e.length;t++){u=document.createElement("div");const n=document.createElement("input");n.type="checkbox",n.classList.add("checkbox");const i=document.createElement("div"),l=document.createElement("div"),d=document.createElement("div");i.innerHTML="<h3>"+e[t].title+"</h3>",l.innerHTML="<p>"+e[t].description+"</p>",d.innerHTML="<p>"+e[t].dueDate+"</p>",a=e[t].priority,r(u),u.setAttribute("data-priority",a),u.setAttribute("data-index",t),u.setAttribute("data-checked","false"),u.setAttribute("data-editing","false"),u.appendChild(n),u.appendChild(i),u.appendChild(l),u.appendChild(d),u.classList.add("showItemDiv"),l.classList.add("showDescription"),m.appendChild(u),n.addEventListener("click",c),u.addEventListener("click",(e=>{e.target==u&&"false"==u.getAttribute("data-checked")&&"false"==u.getAttribute("data-editing")&&s(e.target)})),e[t].displayed=!0,p++}}const g=document.getElementsByTagName("dialog")[0],v=document.getElementById("addItem"),E=document.getElementById("closeDialog"),y=document.getElementsByTagName("form")[0];v.addEventListener("click",(()=>{g.showModal(),y.reset()})),E.addEventListener("click",(()=>{g.close()}));class C{constructor(e,t,n,i){this.title=e,this.description=t,this.dueDate=n,this.priority=i}}document.getElementById("createTodoItem").addEventListener("click",(()=>{!function(e){const t=document.getElementById("title").value,n=document.getElementById("description").value,i=document.getElementById("dueDate").value;if(a=document.getElementById("priority").value,t.length<1)alert("Please Insert a Title.");else if(n.length<1)alert("Please Insert a Description.");else if(""===i)alert("Please Choose Your Due Date.");else{const l=new C(t,n,i,a);console.log(l),console.log(e),e.push(l),h(e),g.close()}}(d)}));const b=document.getElementById("newProject"),x=document.getElementById("projects");b.addEventListener("click",(function(){const e=document.createElement("button"),n=document.createElement("input"),i=document.createElement("button"),a=document.createElement("button");i.innerText="Save",a.innerText="Exit",e.style.padding="3px",i.style.backgroundColor="white",i.style.maxHeight="15px",i.style.maxWidth="15px",i.style.fontSize="1em",i.style.color="navy",i.style.marginTop="5px",a.style.backgroundColor="white",a.style.maxHeight="15px",a.style.maxWidth="15px",a.style.fontSize="1em",a.style.color="navy",a.style.marginTop="5px",e.appendChild(n),e.appendChild(a),e.appendChild(i),i.addEventListener("click",(()=>{let i=n.value;i.length<1?alert("Please Insert Name For Your Project."):(e.innerText=i,i=new Array,o.push(i),e.addEventListener("click",(()=>{t();for(let e=0;e<l.length;e++)l[e].classList.remove("active-project"),l[e].displayed=!1,p=0;e.classList.add("active-project");for(let e=0;e<l.length;e++)l[e].classList.contains("active-project")&&(d=o[e]);h(d)})))})),a.addEventListener("click",(()=>{x.removeChild(e)})),x.removeChild(b),x.appendChild(e),x.appendChild(b),l.push(e)}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,