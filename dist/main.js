(()=>{"use strict";var e={d:(t,n)=>{for(var l in n)e.o(n,l)&&!e.o(t,l)&&Object.defineProperty(t,l,{enumerable:!0,get:n[l]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};function t(){document.getElementById("content").innerHTML=""}function n(e){e.setAttribute("data-editing","true"),console.log("Div IS being edited right now");const t=document.createElement("input"),n=document.createElement("textarea"),l=document.createElement("input"),o=document.createElement("select"),i=document.createElement("option"),d=document.createElement("option"),r=document.createElement("option");i.innerText="Low",d.innerText="Normal",r.innerText="High",i.setAttribute("value","low"),d.setAttribute("value","normal"),r.setAttribute("value","high");const c=e.children,m=c.item(0),g=c.item(1).innerText,h=c.item(2).innerText,v=c.item(3).innerText,y=e.getAttribute("data-priority");m.disabled=!0,t.value=g,n.innerText=h,l.value=v,o.innerText=y,o.appendChild(i),o.appendChild(d),o.appendChild(r),"low"==y?i.selected=!0:"normal"==y?d.selected=!0:"high"==y&&(r.selected=!0),l.type="date",e.appendChild(t),e.appendChild(n),e.appendChild(l),e.appendChild(o),e.removeChild(c.item(1)),e.removeChild(c.item(1)),e.removeChild(c.item(1));const b=document.createElement("button"),C=document.createElement("button"),E=document.createElement("button");b.classList.add("editButton","saveEditButton"),C.classList.add("editButton","closeEditButton"),E.classList.add("editButton","deleteEditButton"),b.innerText="Save",C.innerText="Close",E.innerText="Delete",e.appendChild(E),e.appendChild(C),e.appendChild(b),E.addEventListener("click",(()=>{u.removeChild(e);const t=parseInt(e.getAttribute("data-index"));a.pop(a[t]),e.setAttribute("data-editing","false"),console.log("Div IS NOT being edited right now.")})),C.addEventListener("click",(()=>{const i=document.createElement("h3"),d=document.createElement("p"),a=document.createElement("p");e.setAttribute("data-priority",y),i.innerText=g,d.innerText=h,d.style.fontStyle="italic",a.innerText=v,e.appendChild(i),e.appendChild(d),e.appendChild(a),e.removeChild(t),e.removeChild(n),e.removeChild(l),e.removeChild(o),e.removeChild(b),e.removeChild(C),e.removeChild(E),m.disabled=!1,e.setAttribute("data-editing","false"),console.log("Div IS NOT being edited right now.")})),b.addEventListener("click",(()=>{const i=document.createElement("h3"),d=document.createElement("p"),r=document.createElement("p");i.innerText=t.value,d.innerText=n.value,d.style.fontStyle="italic",r.innerText=l.value;const c=parseInt(e.getAttribute("data-index"));a[c].title=t.value,a[c].description=n.value,a[c].dueDate=l.value,a[c].priority=o.value,s=o.value,p(e),e.setAttribute("data-priority",o.value),console.log(a[c]),console.log("Saved item's priority is: "+a[c].priority),e.appendChild(i),e.appendChild(d),e.appendChild(r),e.removeChild(t),e.removeChild(n),e.removeChild(l),e.removeChild(o),e.removeChild(b),e.removeChild(C),e.removeChild(E),m.disabled=!1,e.setAttribute("data-editing","false"),console.log("Div IS NOT being edited right now.")}))}function l(){console.log("Storage has been updated");let e=JSON.stringify(a),t=JSON.stringify(d),n=JSON.stringify(r);console.log(e),console.log(t),console.log(n),localStorage.setItem("activeArray",e),localStorage.setItem("allProjects",t),localStorage.setItem("allProjectArrays",n)}e.d({},{q7:()=>k,B5:()=>C,r3:()=>b,OS:()=>L,ar:()=>x,dt:()=>T});const o=document.getElementById("inbox");let i=[],d=[];d.push(o);let a,r=[];r.push(i),a=i;const c=document.getElementById("content");let s;function p(e){e.style.backgroundColor="low"===s?"lightblue":"normal"==s?"rgb(51, 126, 245)":"red"}function m(e){if(s=e.target.parentElement.getAttribute("data-priority"),!0===e.target.checked){e.target.parentElement.style.backgroundColor="green",console.log("Div is checked"),e.target.parentElement.setAttribute("data-checked","true");let t=e.target.parentElement.getAttribute("data-index");a[t].checked=!0,console.log(a[t].checked)}else{"low"===s?(e.target.parentElement.style.backgroundColor="lightblue",console.log("Div is not checked"),e.target.parentElement.setAttribute("data-checked","false")):"normal"==s?(e.target.parentElement.style.backgroundColor="rgb(51, 126, 245)",console.log("Div is not checked"),e.target.parentElement.setAttribute("data-checked","false")):(e.target.parentElement.style.backgroundColor="red",console.log("Div is not checked"),e.target.parentElement.setAttribute("data-checked","false"));let t=e.target.parentElement.getAttribute("data-index");a[t].checked=!1,console.log(a[t].checked)}}o.classList.add("active-project"),o.addEventListener("click",(()=>{t(),C.disabled=!0,C.style.backgroundColor="grey";for(let e=0;e<d.length;e++)d[e].classList.remove("active-project"),d[e].displayed=!1,v=0;o.classList.add("active-project");for(let e=0;e<d.length;e++)d[e].classList.contains("active-project")&&(a=r[e],l());for(let e=0;e<i.length;e++){for(let t=0;t<i[e].length;t++)i[e][t].displayed=!1,console.log(i[e][t]);console.log("displayedItems: "+v),v=0,y(i[e])}c.appendChild(L),console.log(c.children.length);for(const e of c.children)e.firstChild.disabled=!0;c.firstChild.firstChild.disabled=!0})),null===localStorage.getItem("activeArray")?(console.log("There is no such this as 'activeArray' inside localStorage. I will populate it now..."),l()):function(){console.log("Reading values...");const e=localStorage.getItem("activeArray"),t=localStorage.getItem("allProjectArrays"),n=localStorage.getItem("allProjects");e.length>0&&t.length>1&&n>1&&(a=JSON.parse(e),r=JSON.parse(t),d=JSON.parse(n)),console.log(a),console.log(r),console.log(d),console.log("~~~~~~~~~~~~~~~~~~~~~~~")}();const u=document.getElementById("content");let g;const h=document.getElementById("inbox");let v=0;function y(e){for(let t=v;t<e.length;t++){g=document.createElement("div");const l=document.createElement("input");l.type="checkbox",l.classList.add("checkbox");const o=document.createElement("div"),i=document.createElement("div"),d=document.createElement("div");o.innerHTML="<h3>"+e[t].title+"</h3>",i.innerHTML="<p>"+e[t].description+"</p>",d.innerHTML="<p>"+e[t].dueDate+"</p>",s=e[t].priority,p(g),g.setAttribute("data-priority",s),g.setAttribute("data-index",t),g.setAttribute("data-checked","false"),g.setAttribute("data-editing","false"),1==e[t].checked?(l.checked=!0,g.setAttribute("data-checked","true"),g.style.backgroundColor="green"):(l.checked=!1,g.setAttribute("data-checked","false")),g.appendChild(l),g.appendChild(o),g.appendChild(i),g.appendChild(d),g.classList.add("showItemDiv"),i.classList.add("showDescription"),u.appendChild(g),l.addEventListener("click",m),g.addEventListener("click",(e=>{e.target==g&&"false"==g.getAttribute("data-checked")&&"false"==g.getAttribute("data-editing")&&0==h.classList.contains("active-project")&&n(e.target)})),e[t].displayed=!0,v++}}const b=document.getElementsByTagName("dialog")[0],C=document.getElementById("addItem");C.disabled=!0,1==C.disabled?C.style.backgroundColor="grey":C.style.backgroundColor="navy";const E=document.getElementById("closeDialog"),f=document.getElementsByTagName("form")[0];C.addEventListener("click",(()=>{b.showModal(),f.reset()})),E.addEventListener("click",(()=>{b.close()}));class k{constructor(e,t,n,l){this.title=e,this.description=t,this.dueDate=n,this.priority=l}}document.getElementById("createTodoItem").addEventListener("click",(()=>{!function(e){const t=document.getElementById("title").value,n=document.getElementById("description").value,o=document.getElementById("dueDate").value;if(s=document.getElementById("priority").value,t.length<1)alert("Please Insert a Title.");else if(n.length<1)alert("Please Insert a Description.");else if(""===o)alert("Please Choose Your Due Date.");else{const l=new k(t,n,o,s);console.log(l),console.log(e),e.push(l),y(e),b.close()}l()}(a)}));const x=document.getElementById("newProject"),T=document.getElementById("projects");x.addEventListener("click",(function(){const e=document.createElement("div"),n=document.createElement("button"),o=document.createElement("input"),s=document.createElement("button"),p=document.createElement("button");s.innerText="Save",p.innerText="Exit",n.style.padding="9px",s.style.backgroundColor="white",s.style.maxHeight="15px",s.style.maxWidth="15px",s.style.fontSize="1em",s.style.color="navy",s.style.marginTop="5px",p.style.backgroundColor="white",p.style.maxHeight="15px",p.style.maxWidth="15px",p.style.fontSize="1em",p.style.color="navy",p.style.marginTop="5px",n.appendChild(o),n.appendChild(p),n.appendChild(s),e.appendChild(n),s.addEventListener("click",(()=>{let s=o.value;if(s.length<1)alert("Please Insert Name For Your Project.");else{n.innerText=s,s=new Array,r.push(s),i.push(s),n.addEventListener("click",(e=>{t(),C.disabled=!1,C.style.backgroundColor="navy";for(let e=0;e<d.length;e++)d[e].classList.remove("active-project"),d[e].displayed=!1,v=0;n.classList.add("active-project");for(let e=0;e<d.length;e++)d[e].classList.contains("active-project")&&(a=r[e]);y(a)}));const o=document.createElement("button");o.innerText="â†»",o.addEventListener("click",(()=>{e.innerHTML="",e.appendChild(n);for(let t=0;t<s.length;t++){const n=document.createElement("p");n.innerText=`${s[t].title} | ${s[t].dueDate}`,1==c.firstChild.firstChild.checked?n.style.backgroundColor="green":"low"==s[t].priority?n.style.backgroundColor="lightblue":"normal"==s[t].priority?n.style.backgroundColor="rgb(51, 126, 245)":n.style.backgroundColor="red",n.style.padding="2px",n.style.marginTop="3px",e.appendChild(n)}})),o.setAttribute("id","refresh-project"),n.appendChild(o),n.classList.add("project"),l()}})),p.addEventListener("click",(()=>{e.removeChild(n),T.removeChild(e)})),T.removeChild(x),T.appendChild(e),T.appendChild(x),d.push(n)}));const I=document.getElementById("content"),L=document.createElement("p");L.innerHTML="The inbox section is for <b>review only</b>. You can't create, edit or check todo items here. You need to create separate project for that.",L.style.fontStyle="italic",L.style.position="absolute",L.style.bottom="5px",I.style.position="relative",I.appendChild(L)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,